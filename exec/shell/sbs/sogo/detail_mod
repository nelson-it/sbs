#!/bin/bash

. sbs/exec/config/allg
. $(dirname $BASH_SOURCE)/config/functions

if [ ! -f  $certcadir/ca.crt ]; then
    echo "#mne_lang#Zertifikate nicht vorhanden#" >&2
    exit 1
fi

mne_need_error
samba-tool domain info 127.0.0.1 >/dev/null 2>/dev/null
if [ "$?" != "0" ]; then
    echo "#mne_lang#AD Domain ist nicht eingerichtet#" >&2
    exit 1
fi


# ==================================================================
# Domain ermitteln
# ==================================================================
hostname=$(hostname)
domain=$(samba-tool domain info "$hostname" | awk '/^Domain/ { print $3 }')
domaindn=$(echo "$domain" | sed -e 's/\./,DC=/g' -e 's/^/DC=/')

check_capasswd "$vapasswdInput"
check_dnspasswd "$domain"

if [ "$vamailrelayInput" != "" ] && [ "$vamailrelayuserInput" != "" ]; then
	if [ "$vamailrelaypasswordInput" = "" ]; then
	  vamailrelaypasswordInput="$(cat /etc/postfix/sasl/passwd | awk '/^$|^#/{ next } /^'$vamailrelayInput'/{ printf("%s", gensub(/^.*:/,"",1,$2)) }')"
	  if [ "$vamailrelaypasswordInput" = "" ]; then
        echo "#mne_lang#Bitte Mail Relay Password eingeben#" >&2
        exit 2
      fi
      echo  "#mne_lang#Benutze altes Mail Relay Password#" >&2
   fi
fi   


# ==================================================================
# Systembenutzer erzeugen
# ==================================================================
sogouser="sogo-$hostname"
bindpassword=$(dd if=/dev/urandom bs=2048 count=1 2>/dev/null |tr -dc "a-zA-Z0-9"|fold -w 64 |head -1)

mne_need_error 2
samba-tool user list | egrep "^$sogouser\$" >/dev/null
if [ "$errorresult" != "0" ]; then
  samba-tool user create "$sogouser" --random-password $option 2>&$logfile >&$logfile
  samba-tool user setexpiry --noexpiry "$sogouser" 2>&$logfile >&$logfile
fi 

samba-tool user setpassword "$sogouser" --newpassword="$bindpassword" 2>&$logfile >&$logfile

# ==================================================================
# DNS Alias einrichten
# ==================================================================
mne_error_ignore=1
samba-tool dns add "$hostname" $domain sogo CNAME "$hostname.$domain" --use-kerberos=required 2>&$logfile >&$logfile
mne_error_ignore=

# ==================================================================
# Zertifikate in Ordnung bringen
# ==================================================================
cert_mkkey "$hostname"
cert_mkcsr "$hostname" "$hostname" "$hostname.$domain $domain"
cert_mkcrt "$hostname" "$vapasswdInput"


cert_mkkey "sogo"
cert_mkcsr "sogo" "sogo" "sogo.$domain"
cert_mkcrt "sogo" "$vapasswdInput"


sogoprog=$(sogo_confprog "$certcertdir" "$certkeydir" "$domaindn" "$domain" "cn=$sogouser,cn=users,$domaindn" "$bindpassword" "$vamailrelayInput" "$vamailrelayuserInput" "$vamailrelaypasswordInput")

# ==================================================================
# Datenbank und Datenbankbenutzer
# ==================================================================
pg_addaccess "local.*$PGDATABSE.*postgres"       "local   $PGDATABSE       postgres                         trust"
pg_addaccess "host.*$sogouser.*127.0.0.1"        "host    $PGDATABSE       $sogouser          127.0.0.1/32  trust"

pg_adduser "$sogouser"
echo "ALTER ROLE \"$sogouser\" SET search_path TO ext_sogo;"              | psql -U postgres >&$logfile 2>&$logfile
echo "CREATE SCHEMA ext_sogo AUTHORIZATION \"$sogouser\";"                | psql -U postgres >&$logfile 2>&$logfile
echo "ALTER  SCHEMA ext_sogo OWNER TO \"$sogouser\";"                     | psql -U postgres >&$logfile 2>&$logfile

cmd=
for tbl in $(psql -qAt -c "select tablename from pg_tables where schemaname = 'ext_sogo';" -U postgres)
do
  cmd="$cmd""ALTER TABLE ext_sogo.\"$tbl\" owner to \"$sogouser\";"
done

for tbl in $(psql -qAt -c "select sequence_name from information_schema.sequences where sequence_schema = 'ext_sogo';" -U postgres)
do
  cmd="$cmd""ALTER SEQUENCE ext_sogo.\"$tbl\" owner to \"$sogouser\";"
done

for tbl in $(psql -qAt -c "select table_name from information_schema.views where table_schema = 'ext_sogo';" -U postgres )
do
  cmd="$cmd""ALTER VIEW ext_sogo.\"$tbl\" owner to \"$sogouser\";"
done

echo "$cmd" | psql -U postgres >&$logfile 2>&$logfile

# ==================================================================
# Conf File
# ==================================================================
prog='/####BINDPASSWORD####/ { gsub(/####BINDPASSWORD####/, "'$bindpassword'");  }
      /####BINDUSER####/     { gsub(/####BINDUSER####/,"'$sogouser'"); }
      /####DOMAIN####/       { gsub(/####DOMAIN####/,"'$domain'"); }
      /####DOMAINDN####/     { gsub(/####DOMAINDN####/,"'$domaindn'"); }
      /####DBHOST####/       { gsub(/####DBHOST####/,"'$databasehost'"); }
      /####DBPORT####/       { gsub(/####DBPORT####/,"'$PGPORT'"); }
      /####DATABASE####/     { gsub(/####DATABASE####/,"'$PGDATABASE'"); }
      /####IMAPHOST####/     { gsub(/####IMAPHOST####/,"'$imaphost'"); }
      /####SMTPHOST####/     { gsub(/####SMTPHOST####/,"'$postfixhost'"); }
      /####LDAPHOST####/     { gsub(/####LDAPHOST####/,"'$ldaphost'"); }
      /####EMAIL####/        { gsub(/####EMAIL####/,"'$sogouser'@'$domain'"); }
                             { print $0 }'

sogotemplate="$(findtemplate sogo sogo.conf)"
mkdir -p /etc/sogo 1>&$logfile 2>&$logfile
savefile /etc/sogo/sogo.conf
awk "$prog" < $sogotemplate > $sogoconfigdir/sogo.conf 
cp $sogoconfigdir/sogo.conf /etc/sogo/sogo.conf

# ==================================================================
# Postfix, Dovecot, Apache
# ==================================================================

write_postfix "$sogoprog"
write_dovecot "$sogoprog"
write_apache  "$domain"

# ==================================================================
# Start/Restart Sogo
# ==================================================================

systemctl enable mne_sogo.service 1>&$logfile 2>&$logfile
systemctl daemon-reload
systemctl restart mne_sogo.service

exit 0
